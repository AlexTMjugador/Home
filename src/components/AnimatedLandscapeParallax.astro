---
import { Picture } from "@astrojs/image/components";

const parallaxLayers = {
	"celestial-body": ["sepia"],
	"landscape-trees-far": ["sepia"],
	"landscape-trees-medium": [],
	"landscape-trees-near": ["sepia-[0.66]"],
	fog: [],
	"ground-near": ["brightness-125"],
	trees: ["landscape-parallax-trees-filter"],
};
---

<component-landscape-parallax class="relative h-full overflow-hidden">
	{
		Object.entries(parallaxLayers).map(([imageName, imageClasses]) => (
			<Picture
				src={import(`../images/landscape-parallax/${imageName}.png`)}
				alt=""
				formats={["webp", "png"]}
				widths={[800, 1280, 1920]}
				sizes={undefined as unknown as string}
				aspectRatio={undefined}
				background={undefined}
				width={1980}
				height={1080}
				class:list={[
					`landscape-parallax-${imageName}`,
					"absolute",
					...imageClasses,
				]}
			/>
		))
	}
	<slot />
</component-landscape-parallax>

<script>
	customElements.define(
		"component-landscape-parallax",
		class extends HTMLElement {
			private remainingImagesToLoad: number;

			constructor() {
				super();

				const parallaxLayerImages = this.querySelectorAll("img");

				this.remainingImagesToLoad = parallaxLayerImages.length;

				for (const parallaxImage of parallaxLayerImages) {
					parallaxImage.classList.add("opacity-0");

					const loadHandler = () => {
						if (--this.remainingImagesToLoad == 0) {
							parallaxLayerImages.forEach((parallaxImage) => {
								parallaxImage.classList.add(
									"transition-opacity",
									"duration-300"
								);
								parallaxImage.classList.remove("opacity-0");
							});
						}
					};

					// The image may be immediately available if it is in cache.
					// In that case, the load event does not trigger
					if (!parallaxImage.complete) {
						parallaxImage.addEventListener("load", loadHandler);
					} else {
						loadHandler();
					}
				}
			}
		}
	);
</script>

<style lang="scss">
	.landscape-parallax-trees-filter {
		filter: invert(1) sepia(0.66) brightness(8%)
			drop-shadow(0 50px 25px rgb(0 0 0 / 0.33));
	}

	$layerScrollDistances: (
		trees: 25%,
		ground-near: 15%,
		fog: 25%,
		landscape-trees-near: 10%,
		landscape-trees-medium: 7%,
		landscape-trees-far: 5%,
		celestial-body: 2%,
	);

	@each $name, $distance in $layerScrollDistances {
		.landscape-parallax-#{$name} {
			// The extra width allows up to 25% distance in the
			// horizontal axis without running out of image to show
			@apply pointer-events-none left-[-25%] h-full w-[125%] max-w-none select-none object-cover;

			@keyframes landscape-parallax-scroll-#{$name} {
				from {
					transform: translateX(0);
				}
				to {
					transform: translateX(calc($distance / 2));
				}
			}

			animation: 45s
				cubic-bezier(0.445, 0.05, 0.55, 0.95)
				infinite
				alternate
				landscape-parallax-scroll-#{$name};
		}
	}
</style>
