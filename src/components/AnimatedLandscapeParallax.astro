<div
	class="landscape-parallax relative h-full overflow-hidden transition-opacity"
>
	<picture>
		<source
			srcset="/images/landscape-parallax/celestial-body.webp"
			type="image/webp"
		/>
		<img
			src="/images/landscape-parallax/celestial-body.png"
			alt=""
			class="parallax-celestial-body absolute sepia"
		/>
	</picture>
	<picture>
		<source
			srcset="/images/landscape-parallax/landscape-trees-far.webp"
			type="image/webp"
		/>
		<img
			src="/images/landscape-parallax/landscape-trees-far.png"
			alt=""
			class="parallax-landscape-trees-far absolute inset-0 sepia"
		/>
	</picture>
	<picture>
		<source
			srcset="/images/landscape-parallax/landscape-trees-medium.webp"
			type="image/webp"
		/>
		<img
			src="/images/landscape-parallax/landscape-trees-medium.png"
			alt=""
			class="parallax-landscape-trees-medium absolute inset-0"
		/>
	</picture>
	<picture>
		<source
			srcset="/images/landscape-parallax/landscape-trees-near.webp"
			type="image/webp"
		/>
		<img
			src="/images/landscape-parallax/landscape-trees-near.png"
			alt=""
			class="parallax-landscape-trees-near absolute inset-0 sepia-[0.66]"
		/>
	</picture>
	<picture>
		<source srcset="/images/landscape-parallax/fog.webp" type="image/webp" />
		<img
			src="/images/landscape-parallax/fog.png"
			alt=""
			class="parallax-fog absolute inset-0"
		/>
	</picture>
	<picture>
		<source
			srcset="/images/landscape-parallax/ground-near.webp"
			type="image/webp"
		/>
		<img
			src="/images/landscape-parallax/ground-near.png"
			alt=""
			class="parallax-ground-near absolute inset-0 brightness-125"
		/>
	</picture>
	<picture>
		<source srcset="/images/landscape-parallax/trees.webp" type="image/webp" />
		<img
			src="/images/landscape-parallax/trees.png"
			alt=""
			class="parallax-trees parallax-trees-filter absolute inset-0"
		/>
	</picture>
</div>

<script>
	const invisibilityClass = "opacity-0";

	// Hide the landscape parallax containers until we know they finished loading
	const landscapeParallaxContainers = document.querySelectorAll(
		"div.landscape-parallax"
	);
	for (const landscapeParallaxContainer of landscapeParallaxContainers) {
		landscapeParallaxContainer.classList.add(invisibilityClass);
	}

	const parallaxImages = document.querySelectorAll(
		"div.landscape-parallax img"
	);

	let remainingImagesToLoad = parallaxImages.length;

	// Show the landscape parallax containers when all their images loaded successfully
	for (const parallaxImage of parallaxImages) {
		parallaxImage.addEventListener("load", () => {
			if (--remainingImagesToLoad == 0) {
				landscapeParallaxContainers.forEach((container) => {
					container.classList.remove(invisibilityClass);
				});
			}
		});
	}
</script>

<style lang="scss">
	.parallax-trees-filter {
		filter: invert(1) sepia(0.66) brightness(8%)
			drop-shadow(0 50px 25px rgb(0 0 0 / 0.33));
	}

	$bgLayersScrollDistances: (
		trees: 25%,
		ground-near: 15%,
		fog: 25%,
		landscape-trees-near: 10%,
		landscape-trees-medium: 7%,
		landscape-trees-far: 5%,
		celestial-body: 2%,
	);

	@each $name, $distance in $bgLayersScrollDistances {
		.parallax-#{$name} {
			// The extra width allows up to 25% distance in the
			// horizontal axis without running out of image to show
			@apply pointer-events-none left-[-25%] h-full w-[125%] max-w-none select-none object-cover;

			@keyframes parallax-scroll-#{$name} {
				from {
					transform: translateX(0);
				}
				to {
					transform: translateX(calc($distance / 2));
				}
			}

			animation: 45s
				cubic-bezier(0.445, 0.05, 0.55, 0.95)
				infinite
				alternate
				parallax-scroll-#{$name};
		}
	}
</style>
