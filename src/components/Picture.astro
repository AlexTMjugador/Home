---
import type { ImageMetadata, ImageOutputFormat } from "astro";
import { getImage } from "astro:assets";

export interface Props {
	src: ImageMetadata | Promise<ImageMetadata>;
	classes?: string[];
	hideByDefault?: boolean;
	widths: number[];
	formats: ImageOutputFormat[];
}

const { src, classes, hideByDefault, widths, formats } = Astro.props;

const pictureFormats = [];
for (const format of formats) {
	const pictureWidths = [];
	for (const width of widths) {
		pictureWidths.push(
			await getImage({
				// @ts-expect-error Astro's type definitions here are contradictory and unusuable AFAICT
				src: src,
				format: format,
				width: width,
			}),
		);
	}
	pictureFormats.push(pictureWidths);
}

const mostCompatiblePictureSource =
	pictureFormats[formats.length - 1][widths.length - 1];
---

<picture>
	{
		pictureFormats.map((format) => (
			<source
				srcset={format
					.map(
						(resizedSource) =>
							`${resizedSource.src} ${resizedSource.options.width}w`,
					)
					.join(",")}
				type={`image/${format[0].options.format}`}
			/>
		))
	}
	<img
		src={mostCompatiblePictureSource.src}
		{...mostCompatiblePictureSource.attributes}
		alt=""
		class:list={[...(hideByDefault ? ["opacity-0"] : []), ...(classes ?? [])]}
	/></picture
>
